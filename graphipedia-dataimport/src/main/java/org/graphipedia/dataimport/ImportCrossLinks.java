//
// Copyright (c) 2016 Gianluca Quercini
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//
package org.graphipedia.dataimport;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Logger;

import org.graphipedia.GraphipediaSettings;
import org.graphipedia.dataextract.ExtractCrossLinks;
import org.graphipedia.progress.LoggerFactory;
import org.graphipedia.progress.ProgressCounter;
import org.graphipedia.progress.ReadableTime;
import org.neo4j.unsafe.batchinsert.BatchInserter;

/**
 * This thread imports the cross-links of a Wikipedia language edition to 
 * the Neo4j database.
 * The input to this thread is a CSV file that contains the cross-language links.
 * This CSV file is generated by the thread {@link ExtractCrossLinks}.
 *
 */
public class ImportCrossLinks extends Thread {

	/**
	 * The logger of this thread.
	 */
	private Logger logger;

	/**
	 * The connection to the Neo4j database.
	 */
	private BatchInserter inserter;

	/**
	 * The input file containing the cross-language links.
	 */
	private File crossLinkFile;

	/**
	 * Tracks the progress of the import.
	 */
	private ProgressCounter linkCounter;

	/**
	 * Creates a new thread.
	 * @param settings The import settings.
	 * @param inserter The connection to the Neo4j database.
	 * @param language The language of the Wikipedia edition being currently imported.
	 */
	public ImportCrossLinks(GraphipediaSettings settings, BatchInserter inserter, String language ) {
		this.inserter = inserter;
		this.crossLinkFile = new File(settings.wikipediaEditionDirectory(language), ExtractCrossLinks.OUTPUT_FILE_NAME);
		this.logger = LoggerFactory.createLogger("Import crosslinks  (" + language.toUpperCase() + ")");
		this.linkCounter = new ProgressCounter(logger);
	}

	@Override
	public void run() {
		long startTime = System.currentTimeMillis();
		try {
			BufferedReader bd = new BufferedReader(new FileReader(crossLinkFile));
			String line;
			while( (line = bd.readLine()) != null) {
				String[] nodes = line.split(",");
				long firstNode = Long.parseLong(nodes[0]);
				long secondNode = Long.parseLong(nodes[1]);
				inserter.createRelationship(firstNode, secondNode, LinkType.crosslink, null);
				linkCounter.increment("Cross-links ");
			}
			bd.close();
		}
		catch(IOException e) {
			logger.severe("Error while importing the cross-links");
			e.printStackTrace();
			System.exit(-1);
		}
		long elapsed = System.currentTimeMillis() - startTime;
		logger.info(String.format("%d links imported in " + ReadableTime.readableTime(elapsed) + "\n", linkCounter.getCount()));
	}

}




